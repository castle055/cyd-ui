.TH "include/core/component_attributes.h" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/core/component_attributes.h
.SH SYNOPSIS
.br
.PP
\fC#include 'dimensions\&.hpp'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBattribute_i\fP"
.br
.ti -1c
.RI "struct \fBattr_x< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_y< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_w< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_h< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_margin_top< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_margin_bottom< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_margin_left< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_margin_right< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_padding_top< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_padding_bottom< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_padding_left< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_padding_right< E >\fP"
.br
.ti -1c
.RI "struct \fBattr_content< E >\fP"
.br
.ti -1c
.RI "struct \fBattrs_margin< T >\fP"
.br
.ti -1c
.RI "struct \fBattrs_padding< T >\fP"
.br
.ti -1c
.RI "struct \fBattrs_dimensions< T >\fP"
.br
.ti -1c
.RI "struct \fBattrs_component< T >\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCOMPONENT_ATTRIBUTE\fP(TYPE,  NAME,  DEFAULT)"
.br
.ti -1c
.RI "#define \fBCOMPONENT_ATTRIBUTE_W_MONITOR\fP(TYPE,  NAME,  DEFAULT)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBcontent\fP = std::vector< \fBcydui::components::component_holder_t\fP >"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define COMPONENT_ATTRIBUTE(TYPE, NAME, DEFAULT)"
\fBValue:\fP.PP
.nf
    template<typename E>                         \\
    struct attr_##NAME: public attribute_i {     \\
      ~attr_##NAME() override = default;         \\
      inline E &NAME(auto& _##NAME##_) {         \\
        this\->_##NAME = _##NAME##_;              \\
        return *(E*)this;                        \\
      }                                          \\
      inline E &NAME(auto&& _##NAME##_) {   \\
        this\->_##NAME = _##NAME##_;              \\
        return *(E*)this;                        \\
      }                                          \\
      TYPE _##NAME = DEFAULT;                    \\
    }
.fi

.PP
Definition at line \fB14\fP of file \fBcomponent_attributes\&.h\fP\&..PP
.nf
16                       : public attribute_i {     \\
17       ~attr_##NAME() override = default;         \\
18       inline E &NAME(auto& _##NAME##_) {         \\
19         this\->_##NAME = _##NAME##_;              \\
20         return *(E*)this;                        \\
21       }                                          \\
22       inline E &NAME(auto&& _##NAME##_) {   \\
23         this\->_##NAME = _##NAME##_;              \\
24         return *(E*)this;                        \\
25       }                                          \\
26       TYPE _##NAME = DEFAULT;                    \\
27     }
.fi

.SS "#define COMPONENT_ATTRIBUTE_W_MONITOR(TYPE, NAME, DEFAULT)"
\fBValue:\fP.PP
.nf
    template<typename E>                                   \\
    struct attr_##NAME: public attribute_i {               \\
      ~attr_##NAME() override = default;                   \\
      inline E &NAME(auto& _##NAME##_) {                   \\
        this\->_##NAME = _##NAME##_;                        \\
        this\->_##NAME##_has_changed = true;                \\
        return *(E*)this;                                  \\
      }                                                    \\
      inline E &NAME(auto&& _##NAME##_) {             \\
        this\->_##NAME = _##NAME##_;                        \\
        this\->_##NAME##_has_changed = true;                \\
        return *(E*)this;                                  \\
      }                                                    \\
      TYPE _##NAME = DEFAULT;                              \\
      bool _##NAME##_has_changed = false;                  \\
    }
.fi

.PP
Definition at line \fB29\fP of file \fBcomponent_attributes\&.h\fP\&..PP
.nf
31                       : public attribute_i {               \\
32       ~attr_##NAME() override = default;                   \\
33       inline E &NAME(auto& _##NAME##_) {                   \\
34         this\->_##NAME = _##NAME##_;                        \\
35         this\->_##NAME##_has_changed = true;                \\
36         return *(E*)this;                                  \\
37       }                                                    \\
38       inline E &NAME(auto&& _##NAME##_) {             \\
39         this\->_##NAME = _##NAME##_;                        \\
40         this\->_##NAME##_has_changed = true;                \\
41         return *(E*)this;                                  \\
42       }                                                    \\
43       TYPE _##NAME = DEFAULT;                              \\
44       bool _##NAME##_has_changed = false;                  \\
45     }
.fi

.SH "Typedef Documentation"
.PP 
.SS "using \fBcontent\fP =  std::vector<\fBcydui::components::component_holder_t\fP>"

.PP
Definition at line \fB62\fP of file \fBcomponent_attributes\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
