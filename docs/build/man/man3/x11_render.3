.TH "x11::render" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
x11::render
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBRenderThreadData\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBstart\fP (\fBcydui::graphics::window_t\fP *win)"
.br
.ti -1c
.RI "void \fBresize\fP (\fBpixelmap_t\fP *target, int w, int h)"
.br
.ti -1c
.RI "void \fBflush\fP (\fBcydui::graphics::window_t\fP *win)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void x11::render::flush (\fBcydui::graphics::window_t\fP * win)"

.PP
Definition at line \fB205\fP of file \fBrender\&.cpp\fP\&..PP
.nf
205                                              {
206   std::lock_guard lk {win\->render_mtx};
207   auto _pev = win\->profiler\->scope_event("render::flush");
208   
209   auto* tmp = win\->render_target;
210   win\->render_target = win\->staging_target;
211   win\->staging_target = tmp;
212   
213   win\->dirty = true;
214 }
.fi

.SS "void x11::render::resize (\fBpixelmap_t\fP * target, int w, int h)"

.PP
Definition at line \fB165\fP of file \fBrender\&.cpp\fP\&..PP
.nf
165                                                     {
166   //if (w != target\->w || h != target\->h) {
167   //  Drawable new_drw = XCreatePixmap(state::get_dpy(),
168   //    target\->win\->xwin,
169   //    w,
170   //    h,
171   //    DefaultDepth(state::get_dpy(), state::get_screen()));
172   //  XSetForeground(state::get_dpy(),
173   //    target\->gc,
174   //    BlackPixel(state::get_dpy(), state::get_screen()));
175   //  XFillRectangle(state::get_dpy(), new_drw, target\->gc, 0, 0, w, h);
176   //
177   //  //target\->win\->x_mtx\&.lock();
178   //  XCopyArea(state::get_dpy(),
179   //    target\->drawable,
180   //    new_drw,
181   //    target\->gc,
182   //    0,
183   //    0,
184   //    target\->w,
185   //    target\->h,
186   //    0,
187   //    0);
188   //
189   //  XFreePixmap(state::get_dpy(), target\->drawable);
190   //  XFreeGC(state::get_dpy(), target\->gc);
191   //
192   //  target\->drawable = new_drw;
193   //  target\->gc = XCreateGC(state::get_dpy(), target\->drawable, 0, NULL);
194   //
195   //  //target\->win\->x_mtx\&.unlock();
196   //
197   //  XFlush(state::get_dpy());
198   //
199   //  target\->w = w;
200   //  target\->h = h;
201   //  render::flush(target\->win);
202   //}
203 }
.fi

.SS "void x11::render::start (\fBcydui::graphics::window_t\fP * win)"

.PP
Definition at line \fB79\fP of file \fBrender\&.cpp\fP\&..PP
.nf
79                                              {
80   if (win\->render_thd && win\->render_thd\->running)
81     return;
82   xlog_ctrl\&.debug("Starting render thread");
83   
84   delete (RenderThreadData*) win\->render_data;
85   win\->render_data = new RenderThreadData {
86     \&.win = win,
87   };
88   win\->render_thd = cydui::threading::new_thread(render_task, win\->render_data)
89     \->set_name("RENDER_THD");
90 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
