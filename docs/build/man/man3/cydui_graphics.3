.TH "cydui::graphics" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cydui::graphics
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBcolor\fP"
.br
.ti -1c
.RI "namespace \fBfont\fP"
.br
.ti -1c
.RI "namespace \fBimages\fP"
.br
.ti -1c
.RI "namespace \fBvg\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBwindow_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBwindow_t\fP * \fBcreate_window\fP (\fBprof::context_t\fP *profiler, const char *title, const char *wclass, int x, int y, int w, int h, bool override_redirect=false)"
.br
.ti -1c
.RI "void \fBresize\fP (\fBwindow_t\fP *win, int w, int h)"
.br
.ti -1c
.RI "\fBpixelmap_t\fP * \fBget_frame\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "void \fBflush\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "unsigned long \fBget_id\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "void \fBterminate\fP (\fBwindow_t\fP *win)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBcydui::graphics::window_t\fP * cydui::graphics::create_window (\fBprof::context_t\fP * profiler, const char * title, const char * wclass, int x, int y, int w, int h, bool override_redirect = \fCfalse\fP)"

.PP
Definition at line \fB43\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
52   {
53   static int _ig = XInitThreads();
54   
55   XVisualInfo vinfo;
56   XMatchVisualInfo(state::get_dpy(), state::get_screen(), 32, TrueColor, &vinfo);
57   XSetWindowAttributes wa = {
58     \&.background_pixel = 0,//ParentRelative,
59     \&.border_pixel = 0,
60     \&.bit_gravity = NorthWestGravity,
61     \&.event_mask  = FocusChangeMask | KeyPressMask | KeyReleaseMask
62       | VisibilityChangeMask | StructureNotifyMask | ButtonMotionMask
63       | ButtonPressMask | ButtonReleaseMask | ExposureMask | FocusChangeMask
64       | LeaveWindowMask | EnterWindowMask | PointerMotionMask,
65     \&.override_redirect =
66     override_redirect, // This makes it immutable across workspaces
67     \&.colormap = XCreateColormap(state::get_dpy(), state::get_root(), vinfo\&.visual, AllocNone),
68   };
69   str title_str = title;
70   str wclass_str = wclass;
71   XClassHint ch = {title_str\&.data(), wclass_str\&.data()};
72   
73   int x_o, y_o;
74   unsigned int w_o, h_o;
75   str geom;
76   geom += "0x0";
77   if (x >= 0)
78     geom += "+";
79   geom += std::to_string(x);
80   if (y >= 0)
81     geom += "+";
82   geom += std::to_string(y);
83   
84   int gm_mask = XParseGeometry(geom\&.c_str(), &x_o, &y_o, &w_o, &h_o);
85   
86   if (gm_mask & XNegative)
87     x_o += DisplayWidth(state::get_dpy(), state::get_screen()) \- w;// \- 2;
88   if (gm_mask & YNegative)
89     y_o += DisplayHeight(state::get_dpy(), state::get_screen()) \- h;// \- 2;
90   
91   Window xwin = XCreateWindow(state::get_dpy(),
92     state::get_root(),
93     x_o,
94     y_o,
95     w,
96     h,
97     0,
98     vinfo\&.depth, //DefaultDepth(state::get_dpy(), state::get_screen()),
99     InputOutput,
100     vinfo\&.visual, //DefaultVisual(state::get_dpy(), state::get_screen()),
101     CWBorderPixel | CWBitGravity | CWColormap | CWBackPixel | CWEventMask
102       | (override_redirect ? CWOverrideRedirect : 0U),
103     &wa);
104   XSetClassHint(state::get_dpy(), xwin, &ch);
105   XStoreName(state::get_dpy(), xwin, title);
106   XSync(state::get_dpy(), False);
107   
108   log_task\&.info(
109     "Created window %lX at (%s) x: %d, y: %d", xwin, geom\&.c_str(), x, y);
110   
111   if (!override_redirect) {
112     XWMHints wm = {\&.flags = InputHint, \&.input = 1};
113     XSizeHints* sizeh;
114     sizeh = XAllocSizeHints();
115     sizeh\->flags = PSize | PResizeInc | PBaseSize | PMinSize;
116     sizeh\->height = h;
117     sizeh\->width = w;
118     sizeh\->height_inc = 1;
119     sizeh\->width_inc = 1;
120     if (gm_mask & (XValue | YValue)) {
121       sizeh\->flags |= USPosition | PWinGravity;
122       sizeh\->x = x_o;
123       sizeh\->y = y_o;
124       sizeh\->win_gravity = geom_mask_to_gravity(gm_mask);
125     }
126     //
127     XSetWMProperties(
128       state::get_dpy(), xwin, NULL, NULL, NULL, 0, sizeh, &wm, &ch);
129     XFree(sizeh);
130   }
131   XSync(state::get_dpy(), False);
132   
133   //  XDefineCursor(state::get_dpy(), xwin, state::cursor[CurNormal]\->cursor);
134   if (override_redirect) {
135     XMapRaised(state::get_dpy(), xwin);
136   } else {
137     XMapWindow(state::get_dpy(), xwin);
138   }
139   log_task\&.debug("Mapping window %lX", xwin);
140   
141   auto* win = new window_t(profiler, xwin, w, h);
142   
143   win\->gc = XCreateGC(state::get_dpy(), xwin, 0, nullptr);
144   
145   XSync(state::get_dpy(), False);
146   
147   x11::events::start();
148   
149   return win;
150 }
.fi

.SS "void cydui::graphics::flush (\fBwindow_t\fP * win)"

.PP
Definition at line \fB167\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
167                                        {
168   render::flush(win);
169 }
.fi

.SS "\fBpixelmap_t\fP * cydui::graphics::get_frame (\fBwindow_t\fP * win)"

.PP
Definition at line \fB289\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
289                                                                {
290   return win\->staging_target;
291 }
.fi

.SS "unsigned long cydui::graphics::get_id (\fBwindow_t\fP * win)"

.PP
Definition at line \fB293\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
293                                                               {
294   return (unsigned int) win\->xwin;
295 }
.fi

.SS "void cydui::graphics::resize (\fBwindow_t\fP * win, int w, int h)"

.PP
Definition at line \fB160\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
160                                                       {
161   if (w == 0 || h == 0) return;
162   std::lock_guard lk {win\->render_mtx};
163   win\->render_target\->resize({(size_t) w, (size_t) h});
164   win\->staging_target\->resize({(size_t) w, (size_t) h});
165 }
.fi

.SS "void cydui::graphics::terminate (\fBwindow_t\fP * win)"

.PP
Definition at line \fB297\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
297                                                         {
298   XUnmapWindow(state::get_dpy(), win\->xwin);
299   XDestroyWindow(state::get_dpy(), win\->xwin);
300   delete win\->staging_target;
301   delete win\->render_target;
302   win\->render_thd\->running = false;
303   win\->render_thd\->join();
304 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
