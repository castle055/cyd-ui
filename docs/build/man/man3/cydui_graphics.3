.TH "cydui::graphics" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cydui::graphics
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBcolor\fP"
.br
.ti -1c
.RI "namespace \fBfont\fP"
.br
.ti -1c
.RI "namespace \fBimages\fP"
.br
.ti -1c
.RI "namespace \fBvg\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBwindow_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBwindow_t\fP * \fBcreate_window\fP (\fBprof::context_t\fP *profiler, const char *title, const char *wclass, int x, int y, int w, int h, bool override_redirect=false)"
.br
.ti -1c
.RI "void \fBresize\fP (\fBwindow_t\fP *win, int w, int h)"
.br
.ti -1c
.RI "\fBpixelmap_t\fP * \fBget_frame\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "void \fBflush\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "unsigned long \fBget_id\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "std::pair< int, int > \fBget_position\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "std::pair< int, int > \fBget_size\fP (\fBwindow_t\fP *win)"
.br
.ti -1c
.RI "void \fBterminate\fP (\fBwindow_t\fP *win)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBcydui::graphics::window_t\fP * cydui::graphics::create_window (\fBprof::context_t\fP * profiler, const char * title, const char * wclass, int x, int y, int w, int h, bool override_redirect = \fCfalse\fP)"

.PP
Definition at line \fB43\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
52   {
53   static int _ig = XInitThreads();
54   
55   XVisualInfo vinfo;
56   if (not XMatchVisualInfo(state::get_dpy(), state::get_screen(), 32, TrueColor, &vinfo)) {
57     log_task\&.error("XMatchVisualInfo failed to find a Visual");
58   }
59   Colormap cmap = XCreateColormap(state::get_dpy(), state::get_root(), vinfo\&.visual, AllocNone);
60   XSetWindowAttributes wa = {
61     \&.background_pixel = 0,//ParentRelative,
62     \&.border_pixel = 0,
63     \&.bit_gravity = NorthWestGravity,
64     \&.event_mask  = FocusChangeMask | KeyPressMask | KeyReleaseMask
65       | VisibilityChangeMask | StructureNotifyMask | ButtonMotionMask
66       | ButtonPressMask | ButtonReleaseMask | ExposureMask | FocusChangeMask
67       | LeaveWindowMask | EnterWindowMask | PointerMotionMask,
68     \&.override_redirect =
69     override_redirect, // This makes it immutable across workspaces
70     \&.colormap = cmap,
71   };
72   str title_str = title;
73   str wclass_str = wclass;
74   XClassHint ch = {title_str\&.data(), wclass_str\&.data()};
75   
76   int x_o, y_o;
77   unsigned int w_o, h_o;
78   str geom;
79   geom += "0x0";
80   if (x >= 0)
81     geom += "+";
82   geom += std::to_string(x);
83   if (y >= 0)
84     geom += "+";
85   geom += std::to_string(y);
86   
87   int gm_mask = XParseGeometry(geom\&.c_str(), &x_o, &y_o, &w_o, &h_o);
88   
89   if (gm_mask & XNegative)
90     x_o += DisplayWidth(state::get_dpy(), state::get_screen()) \- w;// \- 2;
91   if (gm_mask & YNegative)
92     y_o += DisplayHeight(state::get_dpy(), state::get_screen()) \- h;// \- 2;
93   
94   Window xwin = XCreateWindow(state::get_dpy(),
95     state::get_root(),
96     x_o,
97     y_o,
98     w,
99     h,
100     0,
101     vinfo\&.depth, //DefaultDepth(state::get_dpy(), state::get_screen()),
102     InputOutput,
103     vinfo\&.visual, //DefaultVisual(state::get_dpy(), state::get_screen()),
104     CWBorderPixel | CWBitGravity | CWColormap | CWBackPixel | CWEventMask
105       | (override_redirect ? CWOverrideRedirect : 0U),
106     &wa);
107   XSetClassHint(state::get_dpy(), xwin, &ch);
108   XStoreName(state::get_dpy(), xwin, title);
109   XSync(state::get_dpy(), False);
110   
111   log_task\&.info(
112     "Created window %lX at (%s) x: %d, y: %d", xwin, geom\&.c_str(), x, y);
113   
114   if (!override_redirect) {
115     XWMHints wm = {\&.flags = InputHint, \&.input = 1};
116     XSizeHints* sizeh;
117     sizeh = XAllocSizeHints();
118     sizeh\->flags = PSize | PResizeInc | PBaseSize | PMinSize;
119     sizeh\->height = h;
120     sizeh\->width = w;
121     sizeh\->height_inc = 1;
122     sizeh\->width_inc = 1;
123     if (gm_mask & (XValue | YValue)) {
124       sizeh\->flags |= USPosition | PWinGravity;
125       sizeh\->x = x_o;
126       sizeh\->y = y_o;
127       sizeh\->win_gravity = geom_mask_to_gravity(gm_mask);
128     }
129     //
130     XSetWMProperties(
131       state::get_dpy(), xwin, NULL, NULL, NULL, 0, sizeh, &wm, &ch);
132     XFree(sizeh);
133   }
134   XSync(state::get_dpy(), False);
135   
136   //  XDefineCursor(state::get_dpy(), xwin, state::cursor[CurNormal]\->cursor);
137   if (override_redirect) {
138     XMapRaised(state::get_dpy(), xwin);
139   } else {
140     XMapWindow(state::get_dpy(), xwin);
141   }
142   log_task\&.debug("Mapping window %lX", xwin);
143   
144   auto* win = new window_t(profiler, xwin, w, h);
145   
146   win\->gc = XCreateGC(state::get_dpy(), xwin, 0, nullptr);
147   
148   XSync(state::get_dpy(), False);
149   
150   x11::events::start();
151   
152   return win;
153 }
.fi

.SS "void cydui::graphics::flush (\fBwindow_t\fP * win)"

.PP
Definition at line \fB170\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
170                                        {
171   render::flush(win);
172 }
.fi

.SS "\fBpixelmap_t\fP * cydui::graphics::get_frame (\fBwindow_t\fP * win)"

.PP
Definition at line \fB292\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
292                                                                {
293   return win\->staging_target;
294 }
.fi

.SS "unsigned long cydui::graphics::get_id (\fBwindow_t\fP * win)"

.PP
Definition at line \fB296\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
296                                                               {
297   return (unsigned int) win\->xwin;
298 }
.fi

.SS "std::pair< int, int > cydui::graphics::get_position (\fBwindow_t\fP * win)"

.PP
Definition at line \fB300\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
300                                                                         {
301   XWindowAttributes attrs;
302   XGetWindowAttributes(state::get_dpy(), win\->xwin, &attrs);
303   return {attrs\&.x, attrs\&.y};
304 }
.fi

.SS "std::pair< int, int > cydui::graphics::get_size (\fBwindow_t\fP * win)"

.PP
Definition at line \fB305\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
305                                                                     {
306   XWindowAttributes attrs;
307   XGetWindowAttributes(state::get_dpy(), win\->xwin, &attrs);
308   return {attrs\&.width, attrs\&.height};
309 }
.fi

.SS "void cydui::graphics::resize (\fBwindow_t\fP * win, int w, int h)"

.PP
Definition at line \fB163\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
163                                                       {
164   if (w == 0 || h == 0) return;
165   std::lock_guard lk {win\->render_mtx};
166   win\->render_target\->resize({(size_t) w, (size_t) h});
167   win\->staging_target\->resize({(size_t) w, (size_t) h});
168 }
.fi

.SS "void cydui::graphics::terminate (\fBwindow_t\fP * win)"

.PP
Definition at line \fB311\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
311                                                         {
312   XUnmapWindow(state::get_dpy(), win\->xwin);
313   XDestroyWindow(state::get_dpy(), win\->xwin);
314   delete win\->staging_target;
315   delete win\->render_target;
316   win\->render_thd\->running = false;
317   win\->render_thd\->join();
318 }
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
