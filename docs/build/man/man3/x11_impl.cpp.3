.TH "src/graphics/x11/x11_impl.cpp" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/graphics/x11/x11_impl.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'cydstd/cydstd\&.h'\fP
.br
\fC#include 'cydstd/logging\&.hpp'\fP
.br
\fC#include 'images\&.h'\fP
.br
\fC#include 'events/events\&.hpp'\fP
.br
\fC#include <X11/Xft/Xft\&.h>\fP
.br
\fC#include <X11/Xlib\&.h>\fP
.br
\fC#include <X11/Xutil\&.h>\fP
.br
\fC#include <png\&.h>\fP
.br
\fC#include 'state/state\&.hpp'\fP
.br
\fC#include 'render/render\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBlog_error_code\fP (int err)"
.br
.ti -1c
.RI "static Bool \fBevpredicate\fP ()"
.br
.ti -1c
.RI "static int \fBgeom_mask_to_gravity\fP (int mask)"
.br
.ti -1c
.RI "static \fBstr\fP \fBto_pattern\fP (\fBfont::Font\fP *font)"
.br
.ti -1c
.RI "static \fBwindow_font\fP \fBload_font\fP (\fBcydui::graphics::window_t\fP *win, \fBfont::Font\fP *font)"
.br
.ti -1c
.RI "static void \fBunload_font\fP (\fBcydui::graphics::window_t\fP *win, \fBfont::Font\fP *font)"
.br
.ti -1c
.RI "static \fBwindow_image\fP \fBload_image\fP (\fBcydui::graphics::window_t\fP *win, \fBcydui::graphics::images::image_t\fP *img)"
.br
.ti -1c
.RI "static void \fBunload_image\fP (\fBcydui::graphics::window_t\fP *win, \fBcydui::graphics::images::image_t\fP *img)"
.br
.ti -1c
.RI "std::pair< int, int > \fBget_text_size\fP (\fBfont::Font\fP *font, const \fBstr\fP &text)"
.br
.ti -1c
.RI "std::pair< int, int > \fBget_image_size\fP (\fBcydui::graphics::images::image_t\fP *img)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBlogging::logger\fP \fBlog_task\fP = {\&.name = 'X11_IMPL', \&.on = true}"
.br
.ti -1c
.RI "static std::unordered_map< \fBstr\fP, XftFont * > \fBcached_fonts\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "static Bool evpredicate ()\fC [static]\fP"

.PP
Definition at line \fB26\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
26                           {
27   return True;
28 }
.fi

.SS "static int geom_mask_to_gravity (int mask)\fC [static]\fP"

.PP
Definition at line \fB30\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
30                                           {
31   switch (mask & (XNegative | YNegative)) {
32     case 0:
33       return NorthWestGravity;
34     case XNegative:
35       return NorthEastGravity;
36     case YNegative:
37       return SouthWestGravity;
38   }
39   
40   return SouthEastGravity;
41 }
.fi

.SS "std::pair< int, int > get_image_size (\fBcydui::graphics::images::image_t\fP * img)"

.PP
Definition at line \fB285\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
287   {
288   imgs::img_data data = imgs::read_jpg(img\->path);
289   return {data\&.width, data\&.height};
290 }
.fi

.SS "std::pair< int, int > get_text_size (\fBfont::Font\fP * font, const \fBstr\fP & text)"

.PP
Definition at line \fB260\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
262   {
263   str font_spec = to_pattern(font);
264   XftFont* xfont;
265   if (cached_fonts\&.contains(font_spec)) {
266     xfont = cached_fonts[font_spec];
267   } else {
268     if (!(xfont = XftFontOpenName(
269       state::get_dpy(), state::get_screen(), font_spec\&.c_str()))) {
270       log_task\&.error("Cannot load font from name %s", font_spec\&.c_str());
271       return {};
272     }
273     cached_fonts[font_spec] = xfont;
274   }
275   XGlyphInfo x_glyph_info;
276   XftTextExtentsUtf8(state::get_dpy(),
277     xfont,
278     (XftChar8*) text\&.c_str(),
279     (int) text\&.size(),
280     &x_glyph_info);
281   //XftFontClose(state::get_dpy(), xfont);
282   return {x_glyph_info\&.xOff, x_glyph_info\&.y};
283 }
.fi

.SS "static \fBwindow_font\fP load_font (\fBcydui::graphics::window_t\fP * win, \fBfont::Font\fP * font)\fC [static]\fP"

.PP
Definition at line \fB188\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
190   {
191   str font_spec = to_pattern(font);
192   if (win\->loaded_fonts\&.contains(font_spec))
193     return win\->loaded_fonts[font_spec];
194   XftFont* xfont;
195   FcPattern* pattern;
196   
197   if (!(xfont = XftFontOpenName(
198     state::get_dpy(), state::get_screen(), font_spec\&.c_str()))) {
199     log_task\&.error("Cannot load font from name %s", font_spec\&.c_str());
200     return {};
201   }
202   if (!(pattern = FcNameParse((FcChar8*) (font_spec\&.c_str())))) {
203     log_task\&.error("Cannot parse font name to pattern: %s", font_spec\&.c_str());
204     return {};
205   }
206   
207   auto f = window_font {\&.xfont = xfont, \&.pattern = pattern};
208   win\->loaded_fonts[font_spec] = f;
209   return f;
210 }
.fi

.SS "static \fBwindow_image\fP load_image (\fBcydui::graphics::window_t\fP * win, \fBcydui::graphics::images::image_t\fP * img)\fC [static]\fP"

.PP
Definition at line \fB218\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
220   {
221   if (win\->loaded_images\&.contains(img\->path))
222     return win\->loaded_images[img\->path];
223   
224   XImage* image = nullptr;
225   
226   //if (img\->path\&.ends_with("\&.jpg")
227   //  || img\->path\&.ends_with("jpeg")) {
228   imgs::img_data data = imgs::read_jpg(img\->path);
229   
230   image = XCreateImage(state::get_dpy(),
231     CopyFromParent,
232     DisplayPlanes(state::get_dpy(), state::get_screen()),
233     ZPixmap,
234     0,
235     data\&.data,
236     data\&.width,
237     data\&.height,
238     8,
239     data\&.width * data\&.components);
240   //log_task\&.info("STATUS = %d", XInitImage(image));
241   //}
242   
243   //
244   //auto f = window_font {\&.xfont = xfont, \&.pattern = pattern};
245   //win\->loaded_fonts[font_spec] = f;
246   auto i = window_image {image};
247   win\->loaded_images[img\->path] = i;
248   return i;
249 }
.fi

.SS "char * log_error_code (int err)"

.PP
Definition at line \fB20\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
20                               {
21   static char buf[128];
22   XGetErrorText(state::get_dpy(), err, buf, 128);
23   return buf;
24 }
.fi

.SS "static \fBstr\fP to_pattern (\fBfont::Font\fP * font)\fC [static]\fP"

.PP
Definition at line \fB174\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
174                                       {
175   str str;
176   str\&.append(font\->name + ":");
177   str\&.append("size=" + std::to_string(font\->size) + ":");
178   str\&.append("antialias=");
179   str\&.append((font\->antialias ? "true" : "false"));
180   str\&.append(":");
181   str\&.append("autohint=");
182   str\&.append((font\->autohint ? "true" : "false"));
183   //str\&.append(":");
184   
185   return str;
186 }
.fi

.SS "static void unload_font (\fBcydui::graphics::window_t\fP * win, \fBfont::Font\fP * font)\fC [static]\fP"

.PP
Definition at line \fB212\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
214   {
215   // TODO \- Implement
216 }
.fi

.SS "static void unload_image (\fBcydui::graphics::window_t\fP * win, \fBcydui::graphics::images::image_t\fP * img)\fC [static]\fP"

.PP
Definition at line \fB251\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
254   {
255   // TODO \- Implement
256 }
.fi

.SH "Variable Documentation"
.PP 
.SS "std::unordered_map<\fBstr\fP, XftFont*> cached_fonts\fC [static]\fP"

.PP
Definition at line \fB258\fP of file \fBx11_impl\&.cpp\fP\&.
.SS "const \fBlogging::logger\fP log_task = {\&.name = 'X11_IMPL', \&.on = true}"

.PP
Definition at line \fB18\fP of file \fBx11_impl\&.cpp\fP\&..PP
.nf
18 {\&.name = "X11_IMPL", \&.on = true};
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
