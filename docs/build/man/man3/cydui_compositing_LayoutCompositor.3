.TH "cydui::compositing::LayoutCompositor" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cydui::compositing::LayoutCompositor
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <compositing\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLayoutCompositor\fP ()"
.br
.ti -1c
.RI "\fB~LayoutCompositor\fP ()"
.br
.ti -1c
.RI "void \fBset_render_target\fP (\fBgraphics::window_t\fP *_render_target, \fBprof::context_t\fP *_profiler)"
.br
.ti -1c
.RI "void \fBcompose\fP (\fBcompositing_tree_t\fP *_tree)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBpixelmap_t\fP * \fBrepaint\fP (\fBcompositing_node_t\fP *node, \fBpixelmap_t\fP *frame=nullptr)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static void \fBcompositing_task\fP (\fBLayoutCompositor\fP *compositor)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::mutex \fBm\fP"
.br
.ti -1c
.RI "std::condition_variable \fBcv\fP"
.br
.ti -1c
.RI "std::atomic_flag \fBrunning\fP {}"
.br
.ti -1c
.RI "std::thread \fBcompositing_thd\fP"
.br
.ti -1c
.RI "\fBgraphics::window_t\fP * \fBrender_target\fP = nullptr"
.br
.ti -1c
.RI "\fBprof::context_t\fP * \fBprofiler\fP = nullptr"
.br
.ti -1c
.RI "\fBcompositing_tree_t\fP * \fBtree\fP = new \fBcompositing_tree_t\fP"
.br
.ti -1c
.RI "bool \fBtree_dirty\fP = true"
.br
.ti -1c
.RI "std::unordered_map< unsigned long, \fBpixelmap_t\fP * > \fBsub_frame_cache\fP {}"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB78\fP of file \fBcompositing\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "cydui::compositing::LayoutCompositor::LayoutCompositor ()\fC [inline]\fP"

.PP
Definition at line \fB177\fP of file \fBcompositing\&.h\fP\&..PP
.nf
177                          {
178         running\&.test_and_set();
179         compositing_thd = std::thread {&compositing_task, this};
180         pthread_t pt = compositing_thd\&.native_handle();
181         pthread_setname_np(pt, "COMPOSITING_THD");
182       }
.fi

.SS "cydui::compositing::LayoutCompositor::~LayoutCompositor ()\fC [inline]\fP"

.PP
Definition at line \fB184\fP of file \fBcompositing\&.h\fP\&..PP
.nf
184                           {
185         running\&.clear();
186         cv\&.notify_all();
187         compositing_thd\&.join();
188       }
.fi

.SH "Member Function Documentation"
.PP 
.SS "void cydui::compositing::LayoutCompositor::compose (\fBcompositing_tree_t\fP * _tree)\fC [inline]\fP"

.PP
Definition at line \fB196\fP of file \fBcompositing\&.h\fP\&..PP
.nf
196                                               {
197         compositing_tree_t* old_tree;
198         {
199           std::lock_guard lk(m);
200           old_tree = tree;
201           tree = _tree;
202           tree_dirty = true;
203         }
204         cv\&.notify_all();
205         delete old_tree;
206       }
.fi

.SS "static void cydui::compositing::LayoutCompositor::compositing_task (\fBLayoutCompositor\fP * compositor)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.PP
Definition at line \fB92\fP of file \fBcompositing\&.h\fP\&..PP
.nf
92                                                                  {
93         auto t0 = std::chrono::system_clock::now();
94         auto t1 = std::chrono::system_clock::now();
95         while (compositor\->running\&.test()) {
96           std::unique_lock lk(compositor\->m);
97           if (nullptr != compositor\->render_target) {
98             compositor\->cv\&.wait(lk, [&] {
99               return compositor\->tree_dirty || !compositor\->running\&.test();
100             });
101             auto _pev = compositor\->profiler\->scope_event("COMPOSITING TASK");
102             compositor\->tree_dirty = false;
103             
104             // Resize if needed, window size \-(EV)\-> layout size \-> frame size \-> screen size
105             graphics::resize(compositor\->render_target, compositor\->tree\->root\&.op\&.w, compositor\->tree\->root\&.op\&.h);
106             pixelmap_t* frame = graphics::get_frame(compositor\->render_target);
107             compositor\->repaint(&compositor\->tree\->root, frame);
108             graphics::flush(compositor\->render_target);
109           }
110           lk\&.unlock();
111           
112           std::this_thread::sleep_until(t0 + 16666us);
113         }
114       }
.fi

.SS "\fBpixelmap_t\fP * cydui::compositing::LayoutCompositor::repaint (\fBcompositing_node_t\fP * node, \fBpixelmap_t\fP * frame = \fCnullptr\fP)\fC [inline]\fP, \fC [private]\fP"

.PP
Definition at line \fB116\fP of file \fBcompositing\&.h\fP\&..PP
.nf
116                                                                                  {
117         pixelmap_t* frm = frame;
118         if (nullptr == frm) {
119           if (sub_frame_cache\&.contains(node\->id)) {
120             frm = sub_frame_cache[node\->id];
121             if (frm\->width() != (size_t) node\->op\&.w || frm\->height() != (size_t) node\->op\&.h) {
122               frm\->resize({
123                 (unsigned long) node\->op\&.w,
124                 (unsigned long) node\->op\&.h
125               });
126             }
127           } else {
128             frm = new pixelmap_t {
129               (unsigned long) node\->op\&.w,
130               (unsigned long) node\->op\&.h
131             };
132             sub_frame_cache[node\->id] = frm;
133           }
134         }
135         pixelmap_editor_t editor {frm};
136         editor\&.clear();
137         bool empty = true;
138         if (!node\->graphics\&.empty()) {
139           empty = false;
140           // Rasterize graphics into `frm`
141           for (const auto &element: node\->graphics\&.elements) {
142             element\->_internal_set_origin(node\->op\&.orig_x, node\->op\&.orig_y);
143             element\->apply_to(editor);
144           }
145         }
146         if (!node\->children\&.empty()) {
147           empty = false;
148           std::vector<std::pair<compositing_node_t*, pixelmap_t*>> sub_frames {};
149           for (auto* c: node\->children) {
150             sub_frames\&.emplace_back(c, repaint(c));
151           }
152           
153           // Compose graphics into 'frm'
154           
155           for (const auto &item: sub_frames) {
156             auto &[snode, sfrm] = item;
157             if (nullptr == sfrm) {
158               continue;
159             }
160             auto surface = Cairo::ImageSurface::create(
161               (unsigned char*) sfrm\->data,
162               Cairo::Surface::Format::ARGB32,
163               (int) sfrm\->width(), (int) sfrm\->height(),
164               cairo_format_stride_for_width(CAIRO_FORMAT_ARGB32, (int) sfrm\->width())
165             );
166             editor\->set_source(surface, node\->op\&.orig_x + snode\->op\&.x, node\->op\&.orig_y + snode\->op\&.y);
167             editor\->paint();
168             
169             //delete sfrm;
170           }
171           
172         }
173         return empty ? nullptr : frm;
174       }
.fi

.SS "void cydui::compositing::LayoutCompositor::set_render_target (\fBgraphics::window_t\fP * _render_target, \fBprof::context_t\fP * _profiler)\fC [inline]\fP"

.PP
Definition at line \fB190\fP of file \fBcompositing\&.h\fP\&..PP
.nf
190                                                                                          {
191         std::lock_guard lk(m);
192         render_target = _render_target;
193         profiler = _profiler;
194       }
.fi

.SH "Member Data Documentation"
.PP 
.SS "std::thread cydui::compositing::LayoutCompositor::compositing_thd\fC [private]\fP"

.PP
Definition at line \fB82\fP of file \fBcompositing\&.h\fP\&.
.SS "std::condition_variable cydui::compositing::LayoutCompositor::cv\fC [private]\fP"

.PP
Definition at line \fB80\fP of file \fBcompositing\&.h\fP\&.
.SS "std::mutex cydui::compositing::LayoutCompositor::m\fC [private]\fP"

.PP
Definition at line \fB79\fP of file \fBcompositing\&.h\fP\&.
.SS "\fBprof::context_t\fP* cydui::compositing::LayoutCompositor::profiler = nullptr\fC [private]\fP"

.PP
Definition at line \fB85\fP of file \fBcompositing\&.h\fP\&.
.SS "\fBgraphics::window_t\fP* cydui::compositing::LayoutCompositor::render_target = nullptr\fC [private]\fP"

.PP
Definition at line \fB84\fP of file \fBcompositing\&.h\fP\&.
.SS "std::atomic_flag cydui::compositing::LayoutCompositor::running {}\fC [private]\fP"

.PP
Definition at line \fB81\fP of file \fBcompositing\&.h\fP\&..PP
.nf
81 {};
.fi

.SS "std::unordered_map<unsigned long, \fBpixelmap_t\fP*> cydui::compositing::LayoutCompositor::sub_frame_cache {}\fC [private]\fP"

.PP
Definition at line \fB90\fP of file \fBcompositing\&.h\fP\&..PP
.nf
90 {};
.fi

.SS "\fBcompositing_tree_t\fP* cydui::compositing::LayoutCompositor::tree = new \fBcompositing_tree_t\fP\fC [private]\fP"

.PP
Definition at line \fB87\fP of file \fBcompositing\&.h\fP\&.
.SS "bool cydui::compositing::LayoutCompositor::tree_dirty = true\fC [private]\fP"

.PP
Definition at line \fB88\fP of file \fBcompositing\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
