.TH "stdui::layout::FlowEventHandler" 3 "CYD-UI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
stdui::layout::FlowEventHandler
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <stdui\&.h>\fP
.PP
Inherits \fBcydui::components::event_handler_t\fP, and \fBstdui::layout::FlowEventHandlerData\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBhorizontal_fixed_width\fP ()"
.br
.ti -1c
.RI "void \fBvertical_fixed_height\fP ()"
.br
.ti -1c
.RI "void \fBhorizontal_free_width\fP ()"
.br
.ti -1c
.RI "void \fBvertical_free_height\fP ()"
.br
.ti -1c
.RI "std::vector< \fBcydui::components::component_holder_t\fP > \fBon_redraw\fP () override"
.br
.in -1c

Public Member Functions inherited from \fBcydui::components::event_handler_t\fP
.in +1c
.ti -1c
.RI "auto & \fB$x\fP () const"
.br
.ti -1c
.RI "auto & \fB$y\fP () const"
.br
.ti -1c
.RI "auto & \fB$w\fP () const"
.br
.ti -1c
.RI "auto & \fB$h\fP () const"
.br
.ti -1c
.RI "auto & \fB$w\fP (auto value) const"
.br
.ti -1c
.RI "auto & \fB$h\fP (auto value) const"
.br
.ti -1c
.RI "auto & \fB$cx\fP () const"
.br
.ti -1c
.RI "auto & \fB$cy\fP () const"
.br
.ti -1c
.RI "auto & \fB$cw\fP () const"
.br
.ti -1c
.RI "auto & \fB$ch\fP () const"
.br
.ti -1c
.RI "auto & \fB$margin_top\fP () const"
.br
.ti -1c
.RI "auto & \fB$margin_bottom\fP () const"
.br
.ti -1c
.RI "auto & \fB$margin_left\fP () const"
.br
.ti -1c
.RI "auto & \fB$margin_right\fP () const"
.br
.ti -1c
.RI "auto & \fB$padding_top\fP () const"
.br
.ti -1c
.RI "auto & \fB$padding_bottom\fP () const"
.br
.ti -1c
.RI "auto & \fB$padding_left\fP () const"
.br
.ti -1c
.RI "auto & \fB$padding_right\fP () const"
.br
.ti -1c
.RI "\fBevent_handler_t\fP ()=default"
.br
.ti -1c
.RI "virtual \fB~event_handler_t\fP ()=default"
.br
.ti -1c
.RI "virtual void \fBon_button_press\fP (\fBButton\fP button, int x, int y)"
.br
.ti -1c
.RI "virtual void \fBon_button_release\fP (\fBButton\fP button, int x, int y)"
.br
.ti -1c
.RI "virtual void \fBon_mouse_enter\fP (int x, int y)"
.br
.ti -1c
.RI "virtual void \fBon_mouse_exit\fP (int x, int y)"
.br
.ti -1c
.RI "virtual void \fBon_mouse_motion\fP (int x, int y)"
.br
.ti -1c
.RI "virtual void \fBon_scroll\fP (int dx, int dy)"
.br
.ti -1c
.RI "virtual void \fBon_key_press\fP (const \fBKeyEvent::DataType\fP &ev)"
.br
.ti -1c
.RI "virtual void \fBon_key_release\fP (const \fBKeyEvent::DataType\fP &ev)"
.br
.ti -1c
.RI "\fB_Pragma\fP ('message (\\'\fBTODO\fP \- \\' \\'\\\\\\'Implement a method to set an input context for text input\\\\\\'\\')') struct listener_data_t"
.br
.ti -1c
.RI "virtual std::unordered_map< std::string, listener_data_t > \fBget_event_listeners\fP ()"
.br
.ti -1c
.RI "virtual void \fBdraw_fragment\fP (\fBgraphics::vg::vg_fragment_t\fP &fragment)"
.br
.in -1c
.SS "Additional Inherited Members"


Public Attributes inherited from \fBcydui::components::event_handler_t\fP
.in +1c
.ti -1c
.RI "\fBevent_handler_t\fP * \fBparent\fP"
.br
.ti -1c
.RI "std::function< \fBcomponent_dimensional_relations_t\fP()> \fBget_dim\fP"
.br
.ti -1c
.RI "std::function< std::vector< \fBcomponent_base_t\fP * >()> \fB$children\fP"
.br
.in -1c

Public Attributes inherited from \fBstdui::layout::FlowEventHandlerData\fP
.in +1c
.ti -1c
.RI "\fBFlowState\fP * \fBstate\fP = nullptr"
.br
.ti -1c
.RI "\fBFlow::props_t\fP * \fBprops\fP = nullptr"
.br
.ti -1c
.RI "\fBattrs_component\fP< \fBFlow\fP > * \fBattrs\fP = nullptr"
.br
.ti -1c
.RI "\fBlogging::logger\fP \fBlog\fP {\&.name = 'Flow'}"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB35\fP of file \fBstdui\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void stdui::layout::FlowEventHandler::horizontal_fixed_width ()\fC [inline]\fP"

.PP
Definition at line \fB37\fP of file \fBstdui\&.h\fP\&..PP
.nf
37                                         {
38             std::unordered_set<cydui::dimensions::dimension_t*> deps {};
39             deps\&.insert(&attrs\->_w);
40             auto chi = $children();
41             
42             for (auto &child: chi) {
43               deps\&.insert(&child\->attrs()\->_w);
44             }
45             for (auto &child: chi) {
46               auto ats = child\->attrs();
47               ats\->h($ch());
48               ats\->x(cydui::dimensions::dimensional_relation_t {[=, this]() {
49                 int total_w = 0;
50                 for (const auto &dim: deps) {
51                   if (dim != &attrs\->_w) { // avoid summing the container's width
52                     total_w += dim\->val();
53                   }
54                 }
55                 int spacing = std::max(0, $cw()\&.val() \- total_w) / ((int) deps\&.size() \- 1);
56                 
57                 int res = 0;
58                 for (const auto &dim: deps) {
59                   res += dim\->val() + spacing;
60                 }
61                 return res;
62               }, deps});
63             }
64           }
.fi

.SS "void stdui::layout::FlowEventHandler::horizontal_free_width ()\fC [inline]\fP"

.PP
Definition at line \fB93\fP of file \fBstdui\&.h\fP\&..PP
.nf
93                                        {
94             auto* spacing = new cydui::dimensions::dimension_t {props\->spacing};
95             std::unordered_set<cydui::dimensions::dimension_t*> deps {};
96             deps\&.insert(spacing);
97             auto chi = $children();
98             for (auto &child: chi) {
99               auto ats = child\->attrs();
100               ats\->h($ch());
101               ats\->x(cydui::dimensions::dimensional_relation_t {[=, this]() {
102                 int res = 0;
103                 for (const auto &dim: deps) {
104                   res += dim\->val() + spacing\->val();
105                 }
106                 return res;
107               }, deps});
108               
109               deps\&.insert(&child\->attrs()\->_w);
110             }
111           }
.fi

.SS "std::vector< \fBcydui::components::component_holder_t\fP > stdui::layout::FlowEventHandler::on_redraw ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBcydui::components::event_handler_t\fP\&.
.PP
Definition at line \fB132\fP of file \fBstdui\&.h\fP\&..PP
.nf
132                     {
133             switch (props\->dir) {
134               case Flow::Direction::HORIZONTAL:
135                 if (attrs\->_w_has_changed) {
136                   horizontal_fixed_width();
137                 } else {
138                   horizontal_free_width();
139                 }
140                 break;
141               case Flow::Direction::VERTICAL:
142                 if (attrs\->_h_has_changed) {
143                   vertical_fixed_height();
144                 } else {
145                   vertical_free_height();
146                 }
147                 break;
148             }
149             
150             return {};
151           }
.fi

.SS "void stdui::layout::FlowEventHandler::vertical_fixed_height ()\fC [inline]\fP"

.PP
Definition at line \fB65\fP of file \fBstdui\&.h\fP\&..PP
.nf
65                                        {
66             std::unordered_set<cydui::dimensions::dimension_t*> deps {};
67             deps\&.insert(&attrs\->_h);
68             auto chi = $children();
69             
70             for (auto &child: chi) {
71               deps\&.insert(&child\->attrs()\->_h);
72             }
73             for (auto &child: chi) {
74               auto ats = child\->attrs();
75               ats\->w($cw());
76               ats\->y(cydui::dimensions::dimensional_relation_t {[=, this]() {
77                 int total_h = 0;
78                 for (const auto &dim: deps) {
79                   if (dim != &attrs\->_h) { // avoid summing the container's width
80                     total_h += dim\->val();
81                   }
82                 }
83                 int spacing = std::max(0, $ch()\&.val() \- total_h) / ((int) deps\&.size() \- 1);
84                 
85                 int res = 0;
86                 for (const auto &dim: deps) {
87                   res += dim\->val() + spacing;
88                 }
89                 return res;
90               }, deps});
91             }
92           }
.fi

.SS "void stdui::layout::FlowEventHandler::vertical_free_height ()\fC [inline]\fP"

.PP
Definition at line \fB112\fP of file \fBstdui\&.h\fP\&..PP
.nf
112                                       {
113             auto* spacing = new cydui::dimensions::dimension_t {props\->spacing};
114             std::unordered_set<cydui::dimensions::dimension_t*> deps {};
115             deps\&.insert(spacing);
116             auto chi = $children();
117             for (auto &child: chi) {
118               auto ats = child\->attrs();
119               ats\->w($cw());
120               ats\->y(cydui::dimensions::dimensional_relation_t {[=, this]() {
121                 int res = 0;
122                 for (const auto &dim: deps) {
123                   res += dim\->val() + spacing\->val();
124                 }
125                 return res;
126               }, deps});
127               
128               deps\&.insert(&child\->attrs()\->_h);
129             }
130           }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for CYD-UI from the source code\&.
